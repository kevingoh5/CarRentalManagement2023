@using CarRentalManagement.Shared.Domain

@page "/colours/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Car colours</h3>
@if (colours == null)
{
    <div class="alert alert-info">Loading colours...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var make in colours)
            {
                <tr>
                    <td>@make.Name</td>
                    <td>
                        <a href="colours/view/@make.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="colours/edit/@make.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="(() => Delete(make.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Make>? colours;

    protected override async Task OnInitializedAsync()
    {
        colours = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.ColoursEndpoint}");
    }

    async Task Delete(int makeId)
    {
        if (colours != null)
        {
            var make = colours.FirstOrDefault(q => q.Id == makeId);
            if (make != null)
            {
                var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {make.Name}?");
                if (confirm)
                {
                    await _client.DeleteAsync($"{Endpoints.ColoursEndpoint}/{makeId}");
                    colours.Remove(make);
                    StateHasChanged(); // Notify the component to refresh the UI
                }
            }
        }
    }
}

